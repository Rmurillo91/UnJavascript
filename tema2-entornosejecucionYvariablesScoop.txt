** tema2 - entornosejecucion/lexical/codigoejecucion


	- el entorno de ejecucion crea, por defecto, un global object al que se 
	puede referenciar con this. Es lo mas primitivo.
	
	Este global object es window, y this.* representa lo mismo.



	- este entorno de ejecucion, al tratar nuestro codigo, primero define las 
	variables y las funciones. Las funciones (definidas puramente, sin variable = )
	se almacenan directamente, asi que aunque la invocacion este por encima de la
	definicion se va a ejecutar.

	Sin embargo, las variables solo se definen. Es decir, si invocamos una variable 
	por encima de su definicion nos va a dar undefined, porque solo crea la variable al
	principio, y al leer el codigo la define. 




	- undefined, no es lo mismo que is not defined. undefined es un valor que establece
	javascript por defecto cada vez que creamos una variable sin definir un valor.
	es importante que nunca se iguale una variable a undefined (es decir, var a; aunque no
	iguala a undefined, solo al principio,esta bien, pero
	a = undefined; esta desaconsejado).
	
	Es decir, cuando hacer var a; al principio es undefined, pero si lo defines a un valor
	si vuelves a poner var a; (en el mismo scope) ya no toma undefined sino que conserva
	su valor.



	- recordatorio, en la primera fase de ejecucion, javascript crea las variables (a undefined)
	y funciones (completas). Despues ejecuta el codigo de arriba a abajo, asi que si la invocacion
	de la variable esta por encima de su ejecucion, esta saldra como undefined.



	- en su base, javascript siempre es sincrono o single thread, es decir, solo un comando a la vez.




	- cada vez que se invoca una funcion se crea un entorno de ejecucion, que a su vez se va apilando 
	en lo que se llama pila de ejecucion (stack), siendo el entorno mas arriba el que se esta ejecutando
	en ese momento. 

	si dentro de la funcion hay otra invocacion se crea otro entorno de ejecucion, y asi. una vez se completa
	ese entorno de ejecucion acaba y vuelve al anterior. asi hasta que no queda ningun y vuelve al Global object.




	- variables de entorno: donde las variables viven, y como se comportan con otras en memoria. las variables 
	(si se crean dentro) dentro de las funciones actuan de manera independendiente, respecto a su entorno de 
	ejecucion.

	Es decir, si dentro de una funcion se ejecuta otra funcion, esa funcion ejecuta su codigo independiente y 
	luego vuelve a su funcion contenedora, no es como si estuviese escrita dentro. es INDEPENDENDIENTE.





	- explica el scoop, con el entorno de ejecucion externo. si no encuentra la variable, salta a la siguiente.
	depende de como este la funcion. si es una funcion invocada (dentro de otra) saltara al global. si es
	una funcion dentro de otra funcion (fisicamente), primero saltara a la funcion madre y si no al global.
